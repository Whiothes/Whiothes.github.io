"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[336],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),m=p(r),g=s,d=m["".concat(l,".").concat(g)]||m[g]||u[g]||o;return r?n.createElement(d,i(i({ref:t},c),{},{components:r})):n.createElement(d,i({ref:t},c))}));function g(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=r.length,i=new Array(o);i[0]=m;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:s,i[1]=a;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5870:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var n=r(7462),s=(r(7294),r(3905));const o={},i="Chapter 9. Process Relationships",a={unversionedId:"TOC/system/apue/ch09",id:"TOC/system/apue/ch09",title:"Chapter 9. Process Relationships",description:"9.3 Network Logins",source:"@site/docs/TOC/system/apue/ch09.md",sourceDirName:"TOC/system/apue",slug:"/TOC/system/apue/ch09",permalink:"/docs/TOC/system/apue/ch09",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter 8. Process Control",permalink:"/docs/TOC/system/apue/ch08"},next:{title:"Computer Systems: A Programmer's Perspective",permalink:"/docs/category/computer-systems-a-programmers-perspective"}},l={},p=[{value:"9.3 Network Logins",id:"93-network-logins",level:2},{value:"9.4 Process Groups",id:"94-process-groups",level:2},{value:"9.5 Sessions",id:"95-sessions",level:2},{value:"9.6 Controlling Terminal",id:"96-controlling-terminal",level:2},{value:"9.7 <code>tcgetpgrp</code>, <code>tcsetgrp</code>, and <code>tcgetsid</code> Functions",id:"97-tcgetpgrp-tcsetgrp-and-tcgetsid-functions",level:2},{value:"9.8 Job Control",id:"98-job-control",level:2},{value:"9.10 Orphaned Process Groups",id:"910-orphaned-process-groups",level:2},{value:"Example",id:"example",level:3},{value:"9.11 FreeBSD Implementation",id:"911-freebsd-implementation",level:2}],c={toc:p};function u(e){let{components:t,...o}=e;return(0,s.kt)("wrapper",(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"chapter-9-process-relationships"},"Chapter 9. Process Relationships"),(0,s.kt)("h2",{id:"93-network-logins"},"9.3 Network Logins"),(0,s.kt)("p",null,"With the terminal logins, ",(0,s.kt)("inlineCode",{parentName:"p"},"init")," knows which terminal devices are enabled for logins and spawns a ",(0,s.kt)("inlineCode",{parentName:"p"},"getty")," process for each device. We have a process waiting for each possible login.\nWith the network logins, all the logins come through the kernel's network interface drivers. We have to wait for a network connection request to arrive."),(0,s.kt)("h2",{id:"94-process-groups"},"9.4 Process Groups"),(0,s.kt)("p",null,"Each process belongs to a process group. A process group is a collection of one or more processes, usually associated with the same job"),(0,s.kt)("h2",{id:"95-sessions"},"9.5 Sessions"),(0,s.kt)("p",null,"A sessions is a collection of one or more process groups."),(0,s.kt)("div",{style:{textAlign:"center"}},(0,s.kt)("p",null,(0,s.kt)("img",{src:r(5529).Z,width:"729",height:"266"})),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Figure 9.6 Arrangement of processes into process groups and sessions"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c"},"\n#include <unistd.h>\n\n/*\n * return process group ID if OK, -1 on error\n */\npid_t setsid(void);\n\n/*\n * return session leader's process group ID if OK, -1 on error\n */\npid_t getsid(pid_t pid);\n")),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"The process becomes ",(0,s.kt)("em",{parentName:"li"},"session leader")," of this new session. ( _",(0,s.kt)("em",{parentName:"li"},"A session leader is the process that creates a session"),")"),(0,s.kt)("li",{parentName:"ol"},"The process becomes the process group leader of a new process group."),(0,s.kt)("li",{parentName:"ol"},"The process has no controlling terminal. ",(0,s.kt)("em",{parentName:"li"},"If the process had a controlling terminal before calling ",(0,s.kt)("inlineCode",{parentName:"em"},"setsid")," , that association is broken"),".")),(0,s.kt)("h2",{id:"96-controlling-terminal"},"9.6 Controlling Terminal"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"A session can have a single ",(0,s.kt)("em",{parentName:"li"},"controlling terminal"),". "),(0,s.kt)("li",{parentName:"ul"},"The session leader that establishes the connection to the controlling terminal is called the ",(0,s.kt)("em",{parentName:"li"},"calling process"),"."),(0,s.kt)("li",{parentName:"ul"},"The process groups within a session can be divided into a single ",(0,s.kt)("em",{parentName:"li"},"foreground process group")," and one ore more ",(0,s.kt)("em",{parentName:"li"},"background process groups"),"."),(0,s.kt)("li",{parentName:"ul"},"If a session has a controlling terminal, it has a single foreground process group and all other process groups in the session are background groups."),(0,s.kt)("li",{parentName:"ul"},"Whenever we press the terminal's interrupt key, the interrupt signal is sent to all processes in the foreground process group."),(0,s.kt)("li",{parentName:"ul"},"Whenever we press the terminal's quit key, the quit signal is sent to all processes in the foreground process group."),(0,s.kt)("li",{parentName:"ul"},"If a modern (or network) disconnect is detected by the terminal interface, the hang-up signal is sent to the ",(0,s.kt)("strong",{parentName:"li"},(0,s.kt)("em",{parentName:"strong"},"controlling process")),".")),(0,s.kt)("div",{style:{textAlign:"center"}},(0,s.kt)("p",null,(0,s.kt)("img",{src:r(4654).Z,width:"729",height:"426"})),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Figure 9.7 Process groups and sessions showing controlling terminal"))),(0,s.kt)("h2",{id:"97-tcgetpgrp-tcsetgrp-and-tcgetsid-functions"},"9.7 ",(0,s.kt)("inlineCode",{parentName:"h2"},"tcgetpgrp"),", ",(0,s.kt)("inlineCode",{parentName:"h2"},"tcsetgrp"),", and ",(0,s.kt)("inlineCode",{parentName:"h2"},"tcgetsid")," Functions"),(0,s.kt)("p",null,"Tell the kernel which process group is the foreground process group, "),(0,s.kt)("p",null,"if the process has a controlling terminal, the process can call ",(0,s.kt)("inlineCode",{parentName:"p"},"tcsetpgrp"),"\nto set the foreground process group ID to ",(0,s.kt)("em",{parentName:"p"},"pgrpid"),". The value of ",(0,s.kt)("em",{parentName:"p"},"pgrpid"),"\n",(0,s.kt)("strong",{parentName:"p"},"must"),"  be the process group ID of a process group in the ",(0,s.kt)("strong",{parentName:"p"},"same")," session,\nand ",(0,s.kt)("em",{parentName:"p"},"fd")," ",(0,s.kt)("strong",{parentName:"p"},"must")," refer to the controlling terminal of the session."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c"},"\n#include <unistd.h>\n\n/*\n * return       process group ID of foreground process group if OK,\n *              -1 on error\n */\npid_t tcgetpgrp(int fd);\n\n/*\n * return       0 if OK, -1 on error\n */\nint tcsetpgrp(int fd, pid_t pgrpid);\n\n/*\n * return       session leader's process group ID if OK,\n *              -1 on error\n */\npid_t tcgetsid(int fd);\n\n")),(0,s.kt)("h2",{id:"98-job-control"},"9.8 Job Control"),(0,s.kt)("p",null,"Job control allows us to start multiple jobs (groups of processes) from a single\nterminal and to control which jobs can access the terminal and which jobs are\nrun in the background."),(0,s.kt)("p",null,"Requirements:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"shell supports"),(0,s.kt)("li",{parentName:"ol"},"terminal driver in the kernel supports "),(0,s.kt)("li",{parentName:"ol"},"kernel must supports certain job-control signals.")),(0,s.kt)("div",{style:{textAlign:"center"}},(0,s.kt)("p",null,(0,s.kt)("img",{src:r(9301).Z,width:"705",height:"815"})),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Figure Summary of job control features with foreground and background jobs, and terminal driver"))),(0,s.kt)("h2",{id:"910-orphaned-process-groups"},"9.10 Orphaned Process Groups"),(0,s.kt)("p",null,"A process whose parent terminates is called an orphan and is inherited by the ",(0,s.kt)("em",{parentName:"p"},"init")," process."),(0,s.kt)("h3",{id:"example"},"Example"),(0,s.kt)("div",{style:{textAlign:"center"}},(0,s.kt)("p",null,(0,s.kt)("img",{src:r(8640).Z,width:"305",height:"324"})),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Figure 9.11 Example of a process about to be orphaned"))),(0,s.kt)("h2",{id:"911-freebsd-implementation"},"9.11 FreeBSD Implementation"),(0,s.kt)("div",{style:{textAlign:"center"}},(0,s.kt)("p",null,(0,s.kt)("img",{src:r(9424).Z,width:"729",height:"634"})),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Figure 9.13 FreeBSD implementation of sessions and process groups"))),(0,s.kt)("p",null,"session structure:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"s_count is the number of process groups in the session."),(0,s.kt)("li",{parentName:"ul"},"s_leader is a pointer to the proc structure of the session leader."),(0,s.kt)("li",{parentName:"ul"},"s_ttyvp is a pointer to the vnode structure of the controlling terminal."),(0,s.kt)("li",{parentName:"ul"},"s_ttyp is a pointer to the ttyp structure of  the controlling terminal."),(0,s.kt)("li",{parentName:"ul"},"s_sid is the session ID.")),(0,s.kt)("p",null,"tty structure:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"t_session points to the session structure that has this terminal as its controlling terminal."),(0,s.kt)("li",{parentName:"ul"},"t_pgrp points to the pgrp structure of the foreground process group."),(0,s.kt)("li",{parentName:"ul"},"t_termios is a structure containing all the special characters and related information for this kernel."),(0,s.kt)("li",{parentName:"ul"},"t_winsize is a winsize structure that contains the current size of the terminal window.")),(0,s.kt)("p",null,"process group:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"pg_id is the process group ID."),(0,s.kt)("li",{parentName:"ul"},"pg_session points to the session strcutre for the session to which this process group belongs."),(0,s.kt)("li",{parentName:"ul"},"pg_members is a pointer to the list of proc structures that are members of this process group.")),(0,s.kt)("p",null,"proc structure for single process:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"p_pid contains the process ID."),(0,s.kt)("li",{parentName:"ul"},"p_pptr is a pointer to the proc structure of the parent process."),(0,s.kt)("li",{parentName:"ul"},"p_pgrp points to the pgrp structure of the process group to which this process belongs."),(0,s.kt)("li",{parentName:"ul"},"p_pglist is a structure containing pointers to the next and previous processes in the process group.")))}u.isMDXComponent=!0},5529:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/09fig06-152bfe4b715f8704e7284de0ba0832ed.jpg"},4654:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/09fig07-ff38d0b3ae906d18f58f0c980062f792.jpg"},9301:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/09fig09-346b55683aeaa1e4786b054ebba2505b.jpg"},8640:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/09fig11-d699fedc34ef19a44322b8350f38ae46.jpg"},9424:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/09fig13-3ad7a47dcb20c7debd1734b864997422.jpg"}}]);