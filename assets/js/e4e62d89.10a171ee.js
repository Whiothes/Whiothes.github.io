"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9237],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),f=a,d=m["".concat(p,".").concat(f)]||m[f]||u[f]||i;return n?r.createElement(d,o(o({ref:t},c),{},{components:n})):r.createElement(d,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3061:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={},o="Chapter 5. Standard I/O Library",l={unversionedId:"TOC/computer/system/apue/ch05",id:"TOC/computer/system/apue/ch05",title:"Chapter 5. Standard I/O Library",description:"5.2 Streams and FILE Objects",source:"@site/docs/TOC/computer/system/apue/ch05.md",sourceDirName:"TOC/computer/system/apue",slug:"/TOC/computer/system/apue/ch05",permalink:"/docs/TOC/computer/system/apue/ch05",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter 4. Fiiles and Directories",permalink:"/docs/TOC/computer/system/apue/ch04"},next:{title:"Chapter 6. System Data Files and Information",permalink:"/docs/TOC/computer/system/apue/ch06"}},p={},s=[{value:"5.2 Streams and FILE Objects",id:"52-streams-and-file-objects",level:2},{value:"5.4 Buffering",id:"54-buffering",level:2},{value:"5.13 Temporary Files",id:"513-temporary-files",level:2}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"chapter-5-standard-io-library"},"Chapter 5. Standard I/O Library"),(0,a.kt)("h2",{id:"52-streams-and-file-objects"},"5.2 Streams and FILE Objects"),(0,a.kt)("p",null,"Standard I/O file stremas can be used with both single-byte and multibyte ('wide') character sets."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"#include <stdio.h>\n#include <wchar.h>\n\n/**\n * @param   mode        negative try to make the specified stream _byte_ oriented\n *                      positive try to make the specified stream _wide_ oriented\n *                      0 not to try to set, but still return\n *\n * @return  positive    wide oriented\n *          negative    byte oriented\n *          0           no orientation\n */\nint fwide(FILE *fp, int mode);\n")),(0,a.kt)("h2",{id:"54-buffering"},"5.4 Buffering"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"_IOFBF: fully buffered"),(0,a.kt)("li",{parentName:"ul"},"_IOLBF: line buffered"),(0,a.kt)("li",{parentName:"ul"},"_IONBF: unbuffered")),(0,a.kt)("h2",{id:"513-temporary-files"},"5.13 Temporary Files"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"#include <stdio.h>\n\nchar *tmpnam(char *ptr);\nFILE *tmpfile(void);\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"tmpfile")," function creates a temporary file (type wb+) that is automatically removed when it is closed or on program termination."),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'#include "apue.h"\n\nint main(void)\n{\n    char name[L_tmpnam], line[MAXLINE];\n    FILE *fp;\n\n    printf("%s\\n", tmpnam(NULL)); /* first temp name */\n\n    tmpnam(name); /* second temp name */\n    printf("%s\\n", name);\n\n    if ((fp = tmpfile()) == NULL) /* create temp file */\n        err_sys("tmpfile: %s\\n", strerror(errno));\n\n    fputs("one line of output\\n", fp); /* write to temp file */\n    rewind(fp);\n\n    if (fgets(line, sizeof(line), fp) == NULL)\n        err_sys("fgets: %s\\n", strerror(errno));\n    fputs(line, stdout);\n\n    return 0;\n}\n')),(0,a.kt)("div",{style:{textAlign:"center"}},(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Figure 5.12 Demonstrate tmpnam and tmpfile functions"))))}u.isMDXComponent=!0}}]);