"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[494],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,c=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),f=s(t),d=i,m=f["".concat(l,".").concat(d)]||f[d]||u[d]||c;return t?r.createElement(m,a(a({ref:n},p),{},{components:t})):r.createElement(m,a({ref:n},p))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var c=t.length,a=new Array(c);a[0]=f;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var s=2;s<c;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},1828:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>s});var r=t(7462),i=(t(7294),t(3905));const c={title:"gcc error when inline without static",tags:["gcc"]},a=void 0,o={permalink:"/blog/2022/06/28/gcc",source:"@site/blog/2022-06-28-gcc.md",title:"gcc error when inline without static",description:"gcc error when inline without static",date:"2022-06-28T00:00:00.000Z",formattedDate:"June 28, 2022",tags:[{label:"gcc",permalink:"/blog/tags/gcc"}],readingTime:2.235,truncated:!1,authors:[],frontMatter:{title:"gcc error when inline without static",tags:["gcc"]},prevItem:{title:"execute bash script remotely via curl",permalink:"/blog/2022/06/28/curl-exec"},nextItem:{title:"center tables in a markdown file",permalink:"/blog/2022/06/28/markdown-center"}},l={authorsImageUrls:[]},s=[{value:"gcc error when inline without static",id:"gcc-error-when-inline-without-static",level:2},{value:"<code>inline</code> only",id:"inline-only",level:3},{value:"C code:",id:"c-code",level:4},{value:"asm code:",id:"asm-code",level:4},{value:"With <code>static</code>",id:"with-static",level:3},{value:"C code",id:"c-code-1",level:4},{value:"asm code",id:"asm-code-1",level:4},{value:"With <code>__attribute__</code>",id:"with-__attribute__",level:3},{value:"C code",id:"c-code-2",level:4},{value:"asm code",id:"asm-code-2",level:4}],p={toc:s};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"gcc-error-when-inline-without-static"},"gcc error when inline without static"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/inline-function-in-c/"},"Inline function in C - GeeksforGeeks")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/22767523/what-inline-attribute-always-inline-means-in-the-function#22767621"},"c - what \u201cinline ",(0,i.kt)("strong",{parentName:"a"},"attribute"),"((always_inline))\u201d means in the function? - Stack Overflow"))),(0,i.kt)("h3",{id:"inline-only"},(0,i.kt)("inlineCode",{parentName:"h3"},"inline")," only"),(0,i.kt)("h4",{id:"c-code"},"C code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n\ninline int func() { printf("dll\\n"); }\n\nint main() { func(); }\n')),(0,i.kt)("h4",{id:"asm-code"},"asm code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm"},"  .section  __TEXT,__text,regular,pure_instructions\n  .build_version macos, 11, 0   sdk_version 11, 1\n  .globl    _main                   ## -- Begin function main\n  .p2align  4, 0x90\n_main:                                  ## @main\n  .cfi_startproc\n## %bb.0:\n  pushq %rbp\n  .cfi_def_cfa_offset 16\n  .cfi_offset %rbp, -16\n  movq  %rsp, %rbp\n  .cfi_def_cfa_register %rbp\n  subq  $16, %rsp\n  callq _func\n  xorl  %ecx, %ecx\n  movl  %eax, -4(%rbp)          ## 4-byte Spill\n  movl  %ecx, %eax\n  addq  $16, %rsp\n  popq  %rbp\n  retq\n  .cfi_endproc\n                                        ## -- End function\n.subsections_via_symbols\n")),(0,i.kt)("h3",{id:"with-static"},"With ",(0,i.kt)("inlineCode",{parentName:"h3"},"static")),(0,i.kt)("h4",{id:"c-code-1"},"C code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n\nstatic inline int func() { printf("dll\\n"); }\n\nint main() { func(); }\n')),(0,i.kt)("h4",{id:"asm-code-1"},"asm code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm"},'  .section  __TEXT,__text,regular,pure_instructions\n  .build_version macos, 11, 0   sdk_version 11, 1\n  .globl    _main                   ## -- Begin function main\n  .p2align  4, 0x90\n_main:                                  ## @main\n  .cfi_startproc\n## %bb.0:\n  pushq %rbp\n  .cfi_def_cfa_offset 16\n  .cfi_offset %rbp, -16\n  movq  %rsp, %rbp\n  .cfi_def_cfa_register %rbp\n  subq  $16, %rsp\n  callq _func\n  xorl  %ecx, %ecx\n  movl  %eax, -4(%rbp)          ## 4-byte Spill\n  movl  %ecx, %eax\n  addq  $16, %rsp\n  popq  %rbp\n  retq\n  .cfi_endproc\n                                        ## -- End function\n  .p2align  4, 0x90         ## -- Begin function func\n_func:                                  ## @func\n  .cfi_startproc\n## %bb.0:\n  pushq %rbp\n  .cfi_def_cfa_offset 16\n  .cfi_offset %rbp, -16\n  movq  %rsp, %rbp\n  .cfi_def_cfa_register %rbp\n  subq  $16, %rsp\n  leaq  L_.str(%rip), %rdi\n  movb  $0, %al\n  callq _printf\n  movl  -4(%rbp), %ecx\n  movl  %eax, -8(%rbp)          ## 4-byte Spill\n  movl  %ecx, %eax\n  addq  $16, %rsp\n  popq  %rbp\n  retq\n  .cfi_endproc\n                                        ## -- End function\n  .section  __TEXT,__cstring,cstring_literals\nL_.str:                                 ## @.str\n  .asciz    "dll\\n"\n\n.subsections_via_symbols\n')),(0,i.kt)("h3",{id:"with-__attribute__"},"With ",(0,i.kt)("inlineCode",{parentName:"h3"},"__attribute__")),(0,i.kt)("h4",{id:"c-code-2"},"C code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n\n#define inline __attribute__((alwyas_inline))\n\ninline int func() { printf("dll\\n"); }\n\nint main() { func(); }\n')),(0,i.kt)("h4",{id:"asm-code-2"},"asm code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm"},'  .section  __TEXT,__text,regular,pure_instructions\n  .build_version macos, 11, 0   sdk_version 11, 1\n  .globl    _func                   ## -- Begin function func\n  .p2align  4, 0x90\n_func:                                  ## @func\n  .cfi_startproc\n## %bb.0:\n  pushq %rbp\n  .cfi_def_cfa_offset 16\n  .cfi_offset %rbp, -16\n  movq  %rsp, %rbp\n  .cfi_def_cfa_register %rbp\n  subq  $16, %rsp\n  leaq  L_.str(%rip), %rdi\n  movb  $0, %al\n  callq _printf\n  movl  -4(%rbp), %ecx\n  movl  %eax, -8(%rbp)          ## 4-byte Spill\n  movl  %ecx, %eax\n  addq  $16, %rsp\n  popq  %rbp\n  retq\n  .cfi_endproc\n                                        ## -- End function\n  .globl    _main                   ## -- Begin function main\n  .p2align  4, 0x90\n_main:                                  ## @main\n  .cfi_startproc\n## %bb.0:\n  pushq %rbp\n  .cfi_def_cfa_offset 16\n  .cfi_offset %rbp, -16\n  movq  %rsp, %rbp\n  .cfi_def_cfa_register %rbp\n  subq  $16, %rsp\n  callq _func\n  xorl  %ecx, %ecx\n  movl  %eax, -4(%rbp)          ## 4-byte Spill\n  movl  %ecx, %eax\n  addq  $16, %rsp\n  popq  %rbp\n  retq\n  .cfi_endproc\n                                        ## -- End function\n  .section  __TEXT,__cstring,cstring_literals\nL_.str:                                 ## @.str\n  .asciz    "dll\\n"\n\n.subsections_via_symbols\n')))}u.isMDXComponent=!0}}]);