"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5034],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),f=i,m=u["".concat(p,".").concat(f)]||u[f]||d[f]||a;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2985:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const a={},o="Chapter 3. File I/O",l={unversionedId:"TOC/system/apue/ch03",id:"TOC/system/apue/ch03",title:"Chapter 3. File I/O",description:"3.10 File Sharing",source:"@site/docs/TOC/system/apue/ch03.md",sourceDirName:"TOC/system/apue",slug:"/TOC/system/apue/ch03",permalink:"/docs/TOC/system/apue/ch03",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter 2. UNIX Standardization and Implementations",permalink:"/docs/TOC/system/apue/ch02"},next:{title:"Chapter 4. Fiiles and Directories",permalink:"/docs/TOC/system/apue/ch04"}},p={},s=[{value:"3.10 File Sharing",id:"310-file-sharing",level:2},{value:"3.11 Atomic Operations",id:"311-atomic-operations",level:2},{value:"<code>pread</code> and <code>pwrite</code> Fucntions",id:"pread-and-pwrite-fucntions",level:3},{value:"3.12 <code>dup</code> and <code>dup2</code> Functions",id:"312-dup-and-dup2-functions",level:2}],c={toc:s};function d(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"chapter-3-file-io"},"Chapter 3. File I/O"),(0,i.kt)("h2",{id:"310-file-sharing"},"3.10 File Sharing"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"v-node: contains information about the type of the file and pointers to function that operate on the file."),(0,i.kt)("li",{parentName:"ul"},"i-node: contains all the information about the file.")),(0,i.kt)("p",null,"for a single process that has two different files open:\none file is open on standard input and the other is open on standard output"),(0,i.kt)("div",{style:{textAlign:"center"}},(0,i.kt)("img",{src:n(7544).Z}),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Figure 3.7 Kernel data structure for open files"))),(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)("div",{style:{textAlign:"center"}},(0,i.kt)("img",{src:n(5305).Z}),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Figure 3.8 Two independent processes with the same file open"))),(0,i.kt)("h2",{id:"311-atomic-operations"},"3.11 Atomic Operations"),(0,i.kt)("h3",{id:"pread-and-pwrite-fucntions"},(0,i.kt)("inlineCode",{parentName:"h3"},"pread")," and ",(0,i.kt)("inlineCode",{parentName:"h3"},"pwrite")," Fucntions"),(0,i.kt)("p",null,"The Single UNIX Specification includes two functions that allow applications to seek and perform I/O atomically: ",(0,i.kt)("inlineCode",{parentName:"p"},"pread")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"pwrite"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"#include <unistd.h>\n\n/**\n * return: number of bytes read, 0 if end of file, -1 on error\n */\nssize_t pread(int fd, void *buf, size_t nbytes, off_t offset);\n\n/**\n * return: number of bytes write, 0 if end of file, -1 on error\n */\nssize_t pwrite(int fd, void *buf, size_t nbytes, off_t offset);\n")),(0,i.kt)("h2",{id:"312-dup-and-dup2-functions"},"3.12 ",(0,i.kt)("inlineCode",{parentName:"h2"},"dup")," and ",(0,i.kt)("inlineCode",{parentName:"h2"},"dup2")," Functions"),(0,i.kt)("div",{style:{textAlign:"center"}},(0,i.kt)("img",{src:n(9467).Z}),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Figure 3.9 Kernel data structures after dup(1)"))))}d.isMDXComponent=!0},7544:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/03fig07-069c5e178f3b1da63e4a496dabd262c6.jpg"},5305:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/03fig08-a635251a9eebe7d8d4812ef8b566f186.jpg"},9467:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/03fig09-810a69a6df032558ddb7650442d3260a.jpg"}}]);