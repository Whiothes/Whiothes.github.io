"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3624],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=c(n),f=a,k=u["".concat(p,".").concat(f)]||u[f]||s[f]||o;return n?r.createElement(k,l(l({ref:t},m),{},{components:n})):r.createElement(k,l({ref:t},m))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9579:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={title:"memory leak",tags:["memory","pstack","watch"],sidebar_position:1},l=void 0,i={permalink:"/blog/2022/06/30/memory-leak",source:"@site/blog/2022-06-30-memory-leak.md",title:"memory leak",description:"find memory leak of a running process",date:"2022-06-30T00:00:00.000Z",formattedDate:"June 30, 2022",tags:[{label:"memory",permalink:"/blog/tags/memory"},{label:"pstack",permalink:"/blog/tags/pstack"},{label:"watch",permalink:"/blog/tags/watch"}],readingTime:.6,truncated:!1,authors:[],frontMatter:{title:"memory leak",tags:["memory","pstack","watch"],sidebar_position:1},prevItem:{title:"ideas of memory pool",permalink:"/blog/2022/07/03/mem-pool"},nextItem:{title:"How to Clear Cache in Linux?",permalink:"/blog/2022/06/29/clean-buff-cache"}},p={authorsImageUrls:[]},c=[{value:"find memory leak of a running process",id:"find-memory-leak-of-a-running-process",level:2}],m={toc:c};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"find-memory-leak-of-a-running-process"},(0,a.kt)("a",{parentName:"h2",href:"https://unix.stackexchange.com/questions/36450/how-can-i-find-a-memory-leak-of-a-running-process"},"find memory leak of a running process")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cat /proc/$pid/smaps\n")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"find out the ",(0,a.kt)("inlineCode",{parentName:"li"},"PID")," of the process")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"ps -aux\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"capture ",(0,a.kt)("inlineCode",{parentName:"li"},"/proc/PID/smaps")," and save into some file like ",(0,a.kt)("inlineCode",{parentName:"li"},"before_meminc.txt")),(0,a.kt)("li",{parentName:"ol"},"wait till memory gets increased"),(0,a.kt)("li",{parentName:"ol"},"try again step 2"),(0,a.kt)("li",{parentName:"ol"},"find the difference between first ",(0,a.kt)("inlineCode",{parentName:"li"},"smaps")," and 2nd ",(0,a.kt)("inlineCode",{parentName:"li"},"smaps"),", e.g. with")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"diff -u before_meminc.txt after_meminc.txt\n")),(0,a.kt)("ol",{start:6},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"note down the address range where memory got increased")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"use ",(0,a.kt)("inlineCode",{parentName:"p"},"pstack")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"watch")," command to get the right call stack"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"watch -n 1 'pstack $PID | tee -a $PID.stack'\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"C-c")," when we caputred right stack"),(0,a.kt)("ol",{start:8},(0,a.kt)("li",{parentName:"ol"},"check our stack file, find the functions between address range which we got from step 6.")))}s.isMDXComponent=!0}}]);